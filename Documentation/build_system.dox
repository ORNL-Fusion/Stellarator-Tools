/*!
 * @page build_system Stellarator-Tools Build System
 * @brief Overview of the Cmake based build system for the Stellarator-Tools
 * suite of codes.
 * @tableofcontents
 *
 * @section build_system_intro Introduction
 * The Stellarator-Tools suite of codes is designed as an umbrella project. The
 * main build system is locacted in the
 * <a href="https://github.com/ORNL-Fusion/Stellarator-Tools.git">Stellarator-Tools</a>
 * GitHub repository. The build system in build around
 * <a href="http://www.cmake.org">cmake</a> and requires a version greater than
 * 3.14. This build system is designed to automatically download
 * dependent projects when a tool is enabled. Cmake can be configured by setting
 * various variables on the command line
 * @code
 -DVARIABLE=value
 -DOTHER_VARIABLE="value1 value2 value3"
 @endcode
 * or by using the \fixed_width{ccmake} interactive tool. Once a variable has
 * been set on the cmake command line, that value is cached and it is no longer
 * necessary to reset it for subsequent Cmake commands. This build system is
 * also designed to obtain the latest sources evertime the code is recompiled.
 *
 * @section build_system_clone Obtaining the code.
 * The
 * <a href="https://github.com/ORNL-Fusion/Stellarator-Tools.git">Stellarator-Tools</a>
 * is the main project from which all subprojects are compiled. To obtain the
 * code use the command
 * @code
 git clone https://github.com/ORNL-Fusion/Stellarator-Tools.git
 @endcode
 *
 * @section build_system_config Configuring Build
 * In this section we will focus on the \fixed_with{ccmake} tool. First navigate
 * to root directory of the repository. Then create a build directory. Typically
 * this is created at the root directory of the repository however it can be
 * anywhere. From inside the build directory run the \fixed_width{ccmake}
 * command.
 * @code
 cd Stellarator-Tools
 mkdir build
 ccmake ../
 @endcode
 *
 * Initialially there will be no options.
 * @image html cmake1.png
 * At the bottom of the screen, there are various command. Pressing the
 * \fixed_width{c} key begins the configure process. Once initally configured,
 * there will be several options. Different tools in the Stellarator-Tools suite
 * of codes can be configured to be built by toggling the
 * \fixed_width{BUILD_<i>code</i>} from \fixed_width{off} to \fixed_width{on}.
 * @image html cmake2.png
 * After changing settings, keep pressing the \fixed_width{c} key until the
 * \fixed_width{g} options appears.
 * @image html cmake3.png
 * After hitting the \fixed_width{g} option \fixed_width{ccmake} will exit and a
 * \fixed_width{Makefile} will be generated. The codes can then be build using
 * \fixed_width{make} command.
 *
 * @section build_system_make Makefile
 * For Stellarator-Tools, Cmake generates makefiles that can be used to build
 * various components. The resulting makefiles contain a bunch of tasks. These
 * tasks can be displayed using the
 * @code
 make help
 @endcode
 * command. For debugging purposes, the full build commandline commands can be 
 * displaced using.
 * @code
 make VERBOSE=1
 @endcode
 *
 * @section build_system_dependencies Dependencies
 * Dependencies on any software project fall under three types. When enableing a
 * code dependend codes are also automatrically enabled. By default, all codes
 * build from the \fixed_width{master} branch. To build specific branches or
 * tags, set the \fixed_width{BUILD_TAG_<i>code</i>} variables. Subprojects are
 * registered using the \fixed_width{register_project} Cmake macro.
 *
 * The next type of dependecy is external libraies
 * that provide functionality that the code uses must be found for the build
 * system to use. The third type of dependency is determining the proper build
 * order. Cmake automatically handles this step.
 *
 * @subsection build_system_libraries Libraries
 * The codes in the Stellarator-Tools suite requires a few external libraries to
 * build. LAPACK and BLAS provide linear algebra routines. Optimized version of
 * these libraies are typically included by an OS or compiler vendor. These
 * packages are found automatically by Cmake using the
 * @code
 find_package
 @endcode
 * function. If for some reason Cmake cannot find working copies of these 
 * libraries an error message should instruct the correct variables to set. If
 * libraries can be found in non standard paths, setting the
 * @fixed_width{CMAKE_PREFIX_PATH} variable will allow the automated search
 * functions to find these files.
 *
 * The <a href="http://www.unidata.ucar.edu/software/netcdf/">NetCDF</a> library
 * provides routines for reading and writting binary files. Unlike the
 * LAPACK/BLAS libraries, Cmake does not come with a built in package to find
 * the netcdf routines. Routines for automatically locating these in standard
 * paths can be found are provided. If the path is not standard, set the
 * @fixed_width{CMAKE_PREFIX_PATH}. Should both this methods fail the
 * @code
 -DNetCDF_C_INCLUDE_DIR="/path/to/the/netcdf/include"
 -DNetCDF_C_LIBRARY="/path/to/the/netcdf/lib/libnetcdf.a"
 -DNetCDF_Fortran_LIBRARY="/path/to/the/netcdf/lib/libnetcdff.a"
 @endcode
 * can be set manually.
 *
 * The codes also may use the
 * <a href="https://netlib.org/scalapack/">ScaLAPACK</a> library. Routines for
 * finding these are also included. If the path is not standard, set the
 * @fixed_width{CMAKE_PREFIX_PATH}. Should both this methods fail the
 * @code
 -DSCALAPACK_LIBRARY="/path/to/the/scalack/lib/libscalapack.a"
 -DBLACS_LIBRARY="/path/to/the/scalack/lib/libblacs.a"
 -DBLACS_INIT_LIBRARY="/path/to/the/scalack/lib/libblacsinit.a"
 @endcode
 * can be set manually.
 *
 * @subsection build_system_sources Sources
 * Cmake parses all the sources file to determine the proper source code level
 * dependencies. The source is specified in the CMakeLists.txt file or source
 * directory. When adding new files to be build, the appropiate CMakeLists.txt
 * needs to be updated aswell. It is not necessary to rerun Cmake at this stage.
 * Instead the build system will automatically detect the change and rerun the
 * depenency generation.
 *
 * @section build_system_documentation Documentation
 * This documentation was generated using the 
 * <a href="http://www.stack.nl/~dimitri/doxygen/index.html">Doxygen</a> tool.
 * If the doxygen tool is detected, and extra task is added to the make file. 
 * @code
 make doc
 @endcode
 * More on the Doxygen generated documentation is avalable on the @ref doxygen
 * page.
 *
 * @section build_system_testing Testing
 * Using CMake a testing frame work has been implmented. Tests maybe run by 
 * @code
 make test
 @endcode
 * or by running
 * @code
 ctest
 @endcode
 * Individual or ranges of tests maybe run by using the 
 * @fixed_width{ctest -R &ltregex&gt} command. As an example to run all the tests
 * for diagnostic rotation use the command 
 * @code
 ctest -R ^diagnostic_rotation
 @endcode
 *
 * Note that the executables need to be generated already and tests need to be 
 * configured. Typically tests should be run using the sequence of commands
 * @code
 make
 make test
 @endcode
 * The results from tests and log file is found in Testing/Temporary.
 *
 * @section build_system_running Running Cmake
 * Cmake can be invoked manually using the command line or using the 
 * setup_cmake. This script, acts like the old setup script. It detects the 
 * current build machine and runs the appropiate cmake command line. Otherwise
 * the cmake command may be invoked directly.
 *
 * Once the makefile has been generated, the cmake command never needs to be run
 * again except to reconfigure a build variable. When a CMakeList.txt file is 
 * altered, the cmake command is rerun using cached values for the variables.
 *
 * @subsection build_system_cmake_variables Cmake Variables
 * @header3{Variable, Values, Discription}
 * @subsubsection build_system_cmake_variables_builtin Built In Variables
 * @begin_table
 *    @item4{CMAKE_Fortran_COMPILER, Path,     Path or command name for the fortran compiler.}
 *    @item4{CMAKE_Fortran_FLAGS,    String,   Flags to pass to the fortran compiler.}
 *    @item4{CMAKE_C_COMPILER,       Path,     Path or command name for the C compiler. While V3FIT and VMEC are all
 *                                             written in Fortran\, some of the Cmake find packages use C compilers.}
 *    @item4{CMAKE_CXX_COMPILER,     Path,     Path or command name for the C++ compiler. While V3FIT and VMEC are all
 *                                             written in Fortran\, some of the Cmake find packages use C++ compilers.}
 *    @item4{CMAKE_BUILD_TYPE,       String
 *                                   * Release
 *                                   * Debug,  Sets weither to generate build files for release or debug versions.}
 *    @item4{CMAKE_PREFIX_PATH,      Path,     Paths to use when searching for libraries and executables.}
 * @end_table
 * @subsubsection build_system_cmake_variables_defined Defined Variables
 * @begin_table
 *    @item4{NETCDF_INC_PATH,        Path,     Path to the NetCDF include directory.}
 *    @item4{NETCDF_LIB_PATH,        Path,     Path to the NetCDF include directory.}
 *    @item4{EXTRA_FLAGS,            String,   Extra flags to pass to the compiler for all build modes.}
 *    @item4{EXTRA_RELEASE_FLAGS,    String,   Extra flags to pass to the compiler for Release builds.}
 *    @item4{EXTRA_DEBUG_FLAGS,      String,   Extra flags to pass to the compiler for Debug builds.}
 *    @item4{USE_PROFILER,           String
 *                                   * On
 *                                   * Off,    Controls if code profiling is turned on or off.}
 * @end_table
 *
 * @section build_system_build_directory Build Directory
 * CMake is configured to generate all build products in the build directory.
 * The build products can be found in the
 * \fixed_width{_deps/<i>code</i>-build/x<i>code</i>}. Optionally the tools can
 * be installed using the
 * @code
 make install
 @endcode
 * command. Install location is controlled by the
 * \fixed_width{CMAKE_INSTALL_PREFIX} variable.
 *
 * @section build_system_trouble_shooting Trouble Shooting
 * If problems are encountered with the build system it is recommened to first
 * try a clean build. Clean builds may be generated by running
 * @code
 make clean
 make
 @endcode
 * If problems persist, the command line arguments used to invoke the compiler
 * and linker may be checked by running
 * @code
 make VERBOSE=1
 @endcode
 */
